{
  "_args": [
    [
      "mockjson",
      "C:\\Users\\iivaniv\\IdeaProjects\\New folder\\react-webpack-test"
    ]
  ],
  "_from": "mockjson@latest",
  "_id": "mockjson@0.0.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/mockjson",
  "_npmUser": {
    "email": "liu@liandong.org",
    "name": "linkwisdom"
  },
  "_npmVersion": "1.2.11",
  "_phantomChildren": {},
  "_requested": {
    "name": "mockjson",
    "raw": "mockjson",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/mockjson/-/mockjson-0.0.3.tgz",
  "_shasum": "8bf789a5f8e437afdedaec982f92899fbe6bc1f9",
  "_shrinkwrap": null,
  "_spec": "mockjson",
  "_where": "C:\\Users\\iivaniv\\IdeaProjects\\New folder\\react-webpack-test",
  "author": {
    "name": "liandong liu"
  },
  "bugs": {
    "url": "https://github.com/linkwisdom/mockJSON/issues"
  },
  "contacts": [
    "liu@liandong.org"
  ],
  "dependencies": {},
  "description": "mock json data on both client side and server side",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "8bf789a5f8e437afdedaec982f92899fbe6bc1f9",
    "tarball": "http://registry.npmjs.org/mockjson/-/mockjson-0.0.3.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/linkwisdom/mockJSON#readme",
  "keywords": [
    "mock",
    "mockData",
    "mockJSON"
  ],
  "license": "BSD",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "linkwisdom",
      "email": "liu@liandong.org"
    }
  ],
  "name": "mockjson",
  "optionalDependencies": {},
  "readme": "# mockjson\r\n- mock json data on both client side and server side\r\n\r\n# Usage\r\n\r\n## install and include\r\n### require by npm and run by node apps\r\n\r\n    npm install mockjson\r\n\r\n    var mock = require('mockjson');\r\n\r\n### require on client browser\r\n  \r\n   require by requireJS, seaJS or esl, any standary client amd loader\r\n\r\n    var mock = require('../mockJSON');\r\n\r\n## create/add vaiables\r\n\r\n    \r\n    mock.data.USERNAME = ['jack', 'willian', 'jerry'];\r\n    mock.data.GENDER = ['boy', 'girl', 'other'];\r\n  \r\n## create/add template\r\n    \r\n    \r\n    var temp = {\r\n        \"id|+1\": 10000,\r\n        \"name\": \"@USERNAME\",\r\n        \"gender|0-1\": \"@GENDER\",\r\n        \"vip|0-1\": false\r\n    }\r\n\r\n\r\n## render the template\r\n\r\n   var json = mock.generate(temp);\r\n   \r\n## bind or render by `set` & `get`\r\n\r\n    var userList = {\r\n        \"data|1-30\": [\r\n            {\r\n                \"id|1000-5000\": 1000,\r\n                \"name\": \"@USERNAME\",\r\n                \"budy|0-200\": [\"@NUMBER\"]\r\n            }\r\n        ]\r\n    };\r\n    \r\n    mock.set('GET/user/list', userList);\r\n    \r\n    \r\n    function response(path, param, callback) {\r\n        var result = mock.get('GET/user/list', {\r\n            path: path,\r\n            param: param\r\n        });\r\n    }\r\n\r\n## Advanced methods\r\n\r\n### setting variables' attributes  with function\r\n\r\n    /**\r\n     * generate attributes with function;\r\n     * @param {Objects} context depends on args passed to `mock.get`\r\n     * @param {number} idx   the index of temperary generating \r\n     */\r\n    mock.data.IDEA = function(context, idx) {\r\n        context || (context = {param: {ideaid: idx}});\r\n\r\n        var param = context.param;\r\n\r\n        var idea = {\r\n            index: idx,\r\n            ideaid: param.ideaid,\r\n            title: mock.generate(\"BUY BEST @KEYWORDS @PROVINCE\"),\r\n            content: \"\"\r\n        };\r\n\r\n        param.unitid && (idea.unitid == param.unitid);\r\n\r\n        return idea;\r\n    }\r\n\r\n    mock.set(/GET\\/idea\\/.*/, {\r\n            \"idea|0-10\": \"@IDEA\"\r\n    });\r\n\r\n    var data = mock.get(\"GET/idea/list\", {param: {\r\n            userid: 1233,\r\n            unitid: 111,\r\n            ideaid: 1333\r\n    }});\r\n\r\n## include template package\r\n\r\n    var pkg = require('./mypackage');\r\n    mock.include(pkg);\r\n    var fruit = mock.get('fruit');\r\n    var orange = mock.get('orange');\r\n\r\n-- the content of `mypackage.js` is listed as:\r\n\r\n    // local variables\r\n    exports.data = {\r\n        'COLOR': ['red', 'green', 'blue'],\r\n        'SHAPE': ['rect', 'triangle', 'circle', 'ball'],\r\n        'FRUIT': ['apple', 'orangle', 'peach', 'berry']\r\n    };\r\n    \r\n    // template fruit\r\n    exports.fruit = {\r\n        \"name\": \"@FRUIT\",\r\n        \"color\": \"@COLOR\",\r\n        \"shape\": \"@SHAPE\",\r\n        \"number|0-5\": \"@NUMBER\"\r\n    };\r\n\r\n    // template orange\r\n    exports.orange = {\r\n        \"color\": \"@COLOR\",\r\n        \"shape\": \"@SHAPE\",\r\n        \"number|0-5\": \"@NUMBER\"\r\n    };\r\n\r\n\r\nincluding the template file can auto loading all the `exports.xxx` object as tamplate; \r\nand `exports.data` as local variable in package\r\n\r\n\r\n## test demo\r\n\r\n    > mock.generate(\"@NUMBER\") \r\n     12\r\n\r\n    > {\"list|0-9\": \"@NUMBER\"}\r\n\r\n    { \r\n        \"list\" : \"863802\"\r\n    }\r\n\r\n    > {\"list|1-9\": [\"@NUMBER\"]}\r\n\r\n    {\r\n        \"list\" : [ \"5\", \"6\", \"8\"]\r\n    }\r\n\r\n    > {\"list|0-1\": true}\r\n\r\n    {\"list\" : false}\r\n\r\n    > {\"user|3-3\": [{\"id|+1\": 13}]}\r\n\r\n    { \r\n        \"user\" : [ \r\n            {\"id\" : 13},\r\n            {\"id\" : 14},\r\n            {\"id\" : 15}\r\n        ]\r\n    }\r\n\r\n",
  "readmeFilename": "README-en.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/linkwisdom/mockJSON.git"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "version": "0.0.3"
}
